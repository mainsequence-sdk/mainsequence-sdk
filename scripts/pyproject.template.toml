[build-system]
requires = ["setuptools>=69", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "${PROJECT_NAME}"
version = "0.1.0"
readme = "README.md"
requires-python = ">=3.10"
dependencies = ["mainsequence"]

[tool.setuptools.packages.find]
where = ["src"]


[tool.ruff]
line-length = 100                 # Max line length for Ruff/Black.
target-version = "py311"          # Optimize checks/fixes for Python 3.10.
extend-exclude = [                # Extra paths to ignore.
  "build", "dist", ".venv", ".tox", ".mypy_cache", ".ruff_cache"
]
fix = true                        # Apply fixes on `ruff check` without --fix.

[tool.ruff.lint]
# `select` enables entire *rule families* by prefix. Ruff then runs every rule whose ID
# starts with that prefix. Concretely:
#
# - "E"  (pycodestyle errors / PEP 8):
#     common examples: E111/E114 (indentation), E225 (missing whitespace around operator),
#     E231 (missing whitespace after ','), E262/E265 (inline comment spacing),
#     E302/E305 (expected blank lines around defs/classes),
#     E402 (module import not at top of file),
#     E711/E712 (comparisons to None/True/False), E722 (bare `except:`).
#
# - "F"  (Pyflakes correctness):
#     common examples: F401 (unused import), F841 (local variable assigned but never used),
#     F821 (undefined name), F632 (use ==/!= to compare to literal/constant),
#     F403/F405 (from x import * / may be undefined).
#
# - "I"  (import order via isort):
#     sorts & groups imports as: __future__ → stdlib → third-party → first-party → local,
#     inserts the required blank lines between groups, alphabetizes within groups,
#     and can combine/split import lines as needed.
#
# - "B"  (flake8-bugbear: bug-prone patterns):
#     common examples: B006 (mutable default argument), B007 (loop control variable not used),
#     B008 (function call as default argument), B011 (`assert False`), B015 (useless expression),
#     B023 (function argument/attribute shadows variable), etc.
#
# - "UP" (pyupgrade: modernize to your `target-version`):
#     examples for py310: convert `.format()` to f-strings when safe, replace `super(Class, self)`
#     with `super()`, prefer built-in generics (`list[int]` not `typing.List[int]`),
#     move ABCs to `collections.abc`, drop `u`-prefix on strings, remove obsolete compatibility code.
#
# If you already enable other rules elsewhere, use `extend-select = [...]` instead of replacing them.
select = ["I"]

# Let Black handle these (they conflict or are redundant):
# - E203: whitespace before ':' in slices (Black intentionally violates this).
# - E501: line-length (Black/formatter handles wrapping).
ignore = ["E203", "E501"]

[tool.ruff.lint.isort]
# Treat these as your own packages so they sort as "first-party".
known-first-party = ["mainsequence","src",]
# (If you use a src/ layout, also set: src-paths = ["src"])